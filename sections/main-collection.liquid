{% stylesheet %}
  .main-collection-grid {
    grid-column: var(--grid-column--mobile);
    @media screen and (width >= 750px) {
      grid-column: var(--grid-column--desktop);
    }
  }

  .collection-wrapper {
    @media screen and (width >= 750px) {
      grid-template-columns:
        1fr repeat(
          var(--centered-column-number),
          minmax(0, calc((var(--page-width) - var(--page-margin) * 2) / var(--centered-column-number)))
        )
        1fr;
    }
  }

  .collection-wrapper:has(.facets-block-wrapper--full-width),
  .collection-wrapper:has(.collection-wrapper--full-width) {
    @media screen and (width >= 750px) {
      grid-column: 1 / -1;
      grid-template-columns:
        minmax(var(--page-margin), 1fr) repeat(
          var(--centered-column-number),
          minmax(0, calc((var(--page-width) - var(--page-margin) * 2) / var(--centered-column-number)))
        )
        minmax(var(--page-margin), 1fr);
    }
  }

  .collection-wrapper:has(.facets--vertical) .main-collection-grid {
    @media screen and (width >= 750px) {
      grid-column: var(--facets-vertical-col-width) / var(--full-width-column-number);
    }
  }

  .collection-wrapper:has(.facets-block-wrapper--vertical:not(#filters-drawer)):has(.collection-wrapper--full-width) {
    @media screen and (width >= 750px) {
      grid-column: 1 / -1;
      grid-template-columns: 0fr repeat(var(--centered-column-number), minmax(0, 1fr)) 0fr;
    }
  }

  :is(.collection-wrapper--full-width, .collection-wrapper--full-width-on-mobile)
    [product-grid-view='default']
    .product-grid__item
    .group-block {
    @media screen and (width < 750px) {
      padding-inline-start: max(var(--padding-xs), var(--padding-inline-start));
      padding-inline-end: max(var(--padding-xs), var(--padding-inline-end));
    }
  }

  :is(.collection-wrapper--full-width, .collection-wrapper--full-width-on-mobile)
    [product-grid-view='mobile-single']
    .product-grid__item
    .group-block {
    @media screen and (width < 750px) {
      padding-inline-start: max(var(--padding-xs), var(--padding-inline-start));
      padding-inline-end: max(var(--padding-xs), var(--padding-inline-end));
    }
  }
{% endstylesheet %}
{% liquid
  # Onboarding: When no products are available, we show placeholder items
  assign products = ''
  if request.design_mode and shop.products_count == 0
    for i in (1..16)
      assign products = products | append: ' ,'
    endfor
    assign products = products | split: ','
  endif
%}

<script
  src="{{ 'results-list.js' | asset_url }}"
  type="module"
></script>

{% javascript %}
  const url = new URL(window.location.href);
  if (url.hash) {
    document.addEventListener(
      'DOMContentLoaded',
      () => {
        const card = document.getElementById(url.hash.slice(1));
        if (card) {
          card.scrollIntoView({ behavior: 'instant' });
        }
      },
      { once: true }
    );
  }
{% endjavascript %}

{% comment %} We always render this full-width, as the child blocks have width: page/full settings {% endcomment %}
<div class="section-background color-{{ section.settings.color_scheme }}"></div>
<results-list
  class="section product-grid-container color-{{ section.settings.color_scheme }}"
  style="--padding-block-start: {{ section.settings.padding-block-start }}px; --padding-block-end: {{ section.settings.padding-block-end }}px;"
  section-id="{{ section.id }}"
>
  <div
    class="collection-wrapper grid gap-style"
  >
    <!-- Debug: collection = {{ collection.handle }}, products_count = {{ collection.products_count }}, design_mode = {{ request.design_mode }}, shop.products_count = {{ shop.products_count }} -->
    {% for block in section.blocks %}
      {% if block.type == 'filters' %}
        {% render 'block', block: block, results: collection, results_size: collection.products_count %}
      {% endif %}
    {% endfor %}

    {% if request.design_mode and shop.products_count == 0 %}
      {% paginate products by 24 %}
        {% capture children %}
          {% for product in products %}
            <li
              class="product-grid__item product-grid__item--{{ forloop.index0 }}"
              data-page="{{ paginate.current_page }}"
              data-product-id="{{ product.id }}"
              data-view-transition-id="{{ product.id }}"
              ref="cards[]"
            >
              {% render 'product-card', product: product %}
            </li>
          {% endfor %}
        {% endcapture %}
        {% render 'product-grid', section: section, children: children, products: products, paginate: paginate %}
      {% endpaginate %}
    {% else %}
      {% comment %} DEBUG: Output collection object at the very start {% endcomment %}
      <div style="background: #ffcc00; padding: 10px; border: 2px solid red; margin-bottom: 20px;">
        <h3 style="color: red;">DEBUG (Top of main-collection.liquid):</h3>
        <p>Collection Handle: <strong>{{ collection.handle | default: "Not Set" }}</strong></p>
        <p>Collection Title: <strong>{{ collection.title | default: "Not Set" }}</strong></p>
        <p>Number of Products in Collection: <strong>{{ collection.products_count | default: "N/A" }}</strong></p>
        <p>Is `collection.products` an array? <strong>{{ collection.products | is_array }}</strong></p>
        <p>First 3 Product Titles (if any):</p>
        <ul>
          {% for prod in collection.products limit:3 %}
            <li>{{ prod.title }} (ID: {{ prod.id }})</li>
          {% else %}
            <li>No products found in collection.products loop here.</li>
          {% endfor %}
        </ul>
      </div>

      {% paginate collection.products by 24 %}
        {% capture children %}
          {% for product in collection.products %}
          {% comment %} --- DEBUG INSIDE LOOP --- {% endcomment %}
          <div style="border: 1px dotted green; padding: 5px; margin: 5px;">
            <p style="color: green; font-weight: bold;">Debug (Inside product loop): Processing Product for Card</p>
            <p>Product Title: {{ product.title | default: "N/A" }}</p>
            <p>Product ID: {{ product.id | default: "N/A" }}</p>
            <p>Product Available: {{ product.available }}</p>
            <p>Raw product.featured_image: <pre>{{ product.featured_image | json }}</pre></p>
            <p>Raw product.featured_media: <pre>{{ product.featured_media | json }}</pre></p>
            <p>Attempted Featured Image URL (width: 100): 
              {% if product.featured_image %}
                {{ product.featured_image | image_url: width: 100 }}
              {% elsif product.featured_media %}
                {{ product.featured_media.preview_image | image_url: width: 100 }}
              {% else %}
                No featured_image or featured_media object found.
              {% endif %}
            </p>
            <p>Attempted Featured Image URL (width: 500 from product.featured_image): 
              {{ product.featured_image | image_url: width: 500 }}
            </p>
            <p>Attempted Featured Image URL (width: 500 from product.featured_media.preview_image): 
              {{ product.featured_media.preview_image | image_url: width: 500 }}
            </p>
          </div>
          {% comment %} --- END DEBUG --- {% endcomment %}
          <li
            id="{{ section.id }}-{{ product.id }}"
            class="product-grid__item product-grid__item--{{ forloop.index0 }}"
            data-page="{{ paginate.current_page }}"
            data-product-id="{{ product.id }}"
            ref="cards[]"
          >
            {% render 'product-card', product: product %}
          </li>
          {% endfor %}
        {% endcapture %}

        {% comment %} --- DEBUG CAPTURED CHILDREN --- {% endcomment %}
        <div style="border: 2px dashed purple; padding: 10px; margin-top: 10px;">
            <h4 style="color: purple;">DEBUG: Captured 'children' HTML for Product Grid:</h4>
            <pre>{{ children | escape }}</pre>
            <p>Length of 'children' string: {{ children | size }}</p>
        </div>
        {% comment %} --- END DEBUG --- {% endcomment %}
        
        {% render 'product-grid',
          section: section,
          children: children,
          products: collection.products,
          paginate: paginate
        %}
      {% endpaginate %}
    {% endif %}
  </div>
</results-list>

{% schema %}
{
  "name": "t:names.collection_container",
  "enabled_on": {
    "templates": ["collection"]
  },
  "blocks": [
    {
      "type": "filters"
    },
    {
      "type": "product-card"
    },
    {
      "type": "@theme"
    },
    {
      "type": "@app"
    }
  ],
  "settings": [
    {
      "type": "select",
      "id": "layout_type",
      "label": "t:settings.type",
      "options": [
        {
          "value": "grid",
          "label": "t:options.grid"
        },
        {
          "value": "organic",
          "label": "t:options.editorial"
        }
      ],
      "default": "grid"
    },
    {
      "type": "select",
      "id": "product_card_size",
      "label": "t:settings.card_size",
      "options": [
        {
          "value": "small",
          "label": "t:options.small"
        },
        {
          "value": "medium",
          "label": "t:options.medium"
        },
        {
          "value": "large",
          "label": "t:options.large"
        },
        {
          "value": "extra-large",
          "label": "t:options.extra_large"
        }
      ],
      "default": "medium",
      "visible_if": "{{ section.settings.layout_type == 'grid' }}"
    },
    {
      "type": "select",
      "id": "mobile_product_card_size",
      "label": "t:settings.mobile_card_size",
      "options": [
        {
          "value": "small",
          "label": "t:options.small"
        },
        {
          "value": "large",
          "label": "t:options.large"
        }
      ],
      "default": "small"
    },
    {
      "type": "header",
      "content": "t:content.layout"
    },
    {
      "type": "select",
      "id": "product_grid_width",
      "label": "t:settings.width",
      "options": [
        {
          "value": "centered",
          "label": "t:options.page"
        },
        {
          "value": "full-width",
          "label": "t:options.full"
        }
      ],
      "default": "centered"
    },
    {
      "type": "checkbox",
      "id": "full_width_on_mobile",
      "label": "t:settings.full_width_on_mobile",
      "default": true,
      "visible_if": "{{ section.settings.product_grid_width != 'full-width' }}"
    },
    {
      "type": "range",
      "id": "columns_gap_horizontal",
      "label": "t:settings.horizontal_gap",
      "min": 0,
      "max": 50,
      "step": 1,
      "unit": "px",
      "default": 16
    },
    {
      "type": "range",
      "id": "columns_gap_vertical",
      "label": "t:settings.vertical_gap",
      "min": 0,
      "max": 50,
      "step": 1,
      "unit": "px",
      "default": 16
    },
    {
      "type": "range",
      "id": "padding-inline-start",
      "label": "t:settings.left_padding",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding-inline-end",
      "label": "t:settings.right_padding",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    },
    {
      "type": "header",
      "content": "t:content.section_layout"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:settings.color_scheme",
      "default": "scheme-1"
    },
    {
      "type": "range",
      "id": "padding-block-start",
      "label": "t:settings.top_padding",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 8
    },
    {
      "type": "range",
      "id": "padding-block-end",
      "label": "t:settings.bottom_padding",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 8
    }
  ],
  "presets": []
}
{% endschema %}
